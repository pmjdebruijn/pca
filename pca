#!/bin/sh




DEFAULT_ROOT_YEARS=30
DEFAULT_INTER_YEARS=15
DEFAULT_LEAF_YEARS=2

ALGO=RSA

COUNTRY=US
ORGANIZATION="ACME Corporation"




BASENAME=$(basename --suffix '.sh' $0)

[ -f /etc/$BASENAME.conf ] && . /etc/$BASENAME.conf && echo "Configuration /etc/$BASENAME.conf loaded..."
[ -f ~/.$BASENAME.conf ] && . ~/.$BASENAME.conf && echo "Configuration ~/.$BASENAME.conf loaded..."
[ -f ./$BASENAME.conf ] && . ./$BASENAME.conf && echo "Configuration ./$BASENAME.conf loaded..."

[ -f /proc/sys/kernel/random/entropy_avail ] && [ $(cat /proc/sys/kernel/random/entropy_avail) -lt 1000 ] && echo "$BASENAME: insufficient entropy available" 1>&2 && exit 1




case $ALGO in
  RSA)
    ROOT_KEY_PARAMS='--rsa --bits 4096 --hash sha384'
    LEAF_KEY_PARAMS='--rsa --bits 2048 --hash sha256'
    ;;
  ECDSA)
    ROOT_KEY_PARAMS='--ecdsa --curve secp384r1 --hash sha384'    # estimated sec equiv to RSA7680
    LEAF_KEY_PARAMS='--ecdsa --curve secp256r1 --hash sha256'    # estimated sec equiv to RSA3072
    ;;
  *)
    echo "$BASENAME: invalid ALGO: $ALGO" 1>&2 && exit 1
    ;;
esac




if [ ! -x "$(which certtool)" ]; then
  echo "$BASENAME: needs certtool (gnutls-bin) anywhere in $PATH" 1>&2 && exit 1
fi

LEAF=leaf

while getopts ':n:y:o:c:d:i' OPT "$@"; do
  case $OPT in
    n) NAME=$OPTARG ;;
    y) YEAR=$OPTARG ;;
    o) ORGANIZATION=$OPTARG ;;
    c) COUNTRY=$OPTARG ;;
    d) DNS_NAMES=$OPTARG ;;
    i) LEAF=inter && LEAF_KEY_PARAMS=$ROOT_KEY_PARAMS ;;
    *)
      echo "$BASENAME: invalid option: -$OPTARG" 1>&2 && exit 1
    ;;
  esac
done

shift $(( $OPTIND - 1 ))

CERT_ROOT=$(echo $1 | tr 'A-Z' 'a-z' | tr -cd '0-9a-z-/')
CERT_LEAF=$(echo $2 | sed 's#^*#wildcard#g'| tr 'A-Z' 'a-z' | tr '.' '-' | tr -cd '0-9a-z-')

CERT_ROOT_NAME=$1
CERT_LEAF_NAME=$2




fullchain ()
{
  local D=$1

  while [ "$D" != "" ]; do
    if [ -f $D/$(basename $D).crt ]; then
      cat $D/$(basename $D).crt
    else
      echo "$BASENAME: missing certificate $D/$(basename $D).crt" 1>&2 && exit 1
    fi
    D=$(echo $D | sed "s#/\?$(basename $D)\$##g")
  done
}




template ()
{
  case $1 in
    root)
      echo "expiration_date = '${YEAR:-$(( $(date +%Y) + $DEFAULT_ROOT_YEARS ))}-12-31 23:59:59 UTC'"
      echo "organization = '$ORGANIZATION'"
      echo "country = $COUNTRY"
      echo "cn = '${NAME:-$CERT_ROOT_NAME Private $ALGO Root Certification Authority $(date +%Y)}'"
      echo "#path_len = 1"
      echo "ca"
      echo "cert_signing_key"
      echo "crl_signing_key"
    ;;
    inter)
      echo "expiration_date = '${YEAR:-$(( $(date +%Y) + $DEFAULT_INTER_YEARS ))}-12-31 23:59:59 UTC'"
      echo "organization = '$ORGANIZATION'"
      echo "country = $COUNTRY"
      echo "cn = '${NAME:-$CERT_ROOT_NAME Private $ALGO Intermediate Certification Authority $(date +%Y)}'"
      echo "#path_len = 0"
      echo "ca"
      echo "cert_signing_key"
      echo "crl_signing_key"
      ;;
    leaf)
      echo "expiration_date = '${YEAR:-$(( $(date +%Y) + $DEFAULT_LEAF_YEARS ))}-12-31 23:59:59 UTC'"
      echo "organization = '$ORGANIZATION'"
      echo "country = $COUNTRY"
      echo "cn = '${NAME:-$CERT_LEAF_NAME}'"
      echo "dns_name = '${NAME:-$CERT_LEAF_NAME}'"	# Subject Alternative Name
      for DNS_NAME in $DNS_NAMES; do
        echo "dns_name = '$DNS_NAME'"			# Subject Alternative Name
      done
      echo "signing_key"
      echo "encryption_key"
      echo "tls_www_server"
      echo "tls_www_client"
      ;;
    sign)
      echo "expiration_date = '${YEAR:-$(( $(date +%Y) + $DEFAULT_LEAF_YEARS ))}-12-31 23:59:59 UTC'"
      echo "honor_crq_ext = 2.5.29.17"			# Subject Alternative Name
      echo "signing_key"
      echo "encryption_key"
      echo "tls_www_server"
      echo "tls_www_client"
      ;;
    *)
      echo "$BASENAME: internal $0 error, $1 unknown!" 1>&2 && exit 1
      ;;
  esac
}




if [ $# -eq 1 ] && [ ! -d $CERT_ROOT ]; then

  mkdir -p $CERT_ROOT
  certtool --generate-privkey		$ROOT_KEY_PARAMS		\
           --outfile			$CERT_ROOT/$CERT_ROOT.key

  template root                       > $CERT_ROOT/$CERT_ROOT.cfg
  certtool --generate-self-signed					\
           --template 			$CERT_ROOT/$CERT_ROOT.cfg	\
           --load-privkey		$CERT_ROOT/$CERT_ROOT.key	\
           --outfile 			$CERT_ROOT/$CERT_ROOT.crt

fi

if [ $# -eq 2 ] && [ -f $CERT_ROOT/$(basename $CERT_ROOT).key ] && [ ! -d $CERT_ROOT/$CERT_LEAF ]; then

  mkdir -p $CERT_ROOT/$CERT_LEAF
  certtool --generate-privkey		$LEAF_KEY_PARAMS			\
           --outfile			$CERT_ROOT/$CERT_LEAF/$CERT_LEAF.key

  template $LEAF                      > $CERT_ROOT/$CERT_LEAF/$CERT_LEAF.cfg
  certtool --generate-certificate						\
           --template			$CERT_ROOT/$CERT_LEAF/$CERT_LEAF.cfg	\
           --load-privkey		$CERT_ROOT/$CERT_LEAF/$CERT_LEAF.key	\
           --outfile			$CERT_ROOT/$CERT_LEAF/$CERT_LEAF.crt	\
           --load-ca-privkey            $CERT_ROOT/$(basename $CERT_ROOT).key	\
           --load-ca-certificate        $CERT_ROOT/$(basename $CERT_ROOT).crt

  [ "$LEAF" = "leaf" ] && fullchain $CERT_ROOT/$CERT_LEAF > $CERT_ROOT/$CERT_LEAF/fullchain.crt

fi

if [ $# -eq 2 ] && [ -f $CERT_ROOT/$CERT_LEAF/$CERT_LEAF.csr ]; then

  template sign                       > $CERT_ROOT/$CERT_LEAF/$CERT_LEAF.cfg

  certtool --generate-certificate	$LEAF_KEY_PARAMS			\
           --template			$CERT_ROOT/$CERT_LEAF/$CERT_LEAF.cfg	\
           --load-request		$CERT_ROOT/$CERT_LEAF/$CERT_LEAF.csr	\
           --outfile			$CERT_ROOT/$CERT_LEAF/$CERT_LEAF.crt	\
           --load-ca-privkey            $CERT_ROOT/$(basename $CERT_ROOT).key	\
           --load-ca-certificate        $CERT_ROOT/$(basename $CERT_ROOT).crt

  [ "$LEAF" = "leaf" ] && fullchain $CERT_ROOT/$CERT_LEAF > $CERT_ROOT/$CERT_LEAF/fullchain.crt

fi
