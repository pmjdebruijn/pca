#!/bin/sh




DEFAULT_TIMEZONE=UTC
DEFAULT_ROOT_YEARS=30
DEFAULT_INTER_YEARS=15

ALGO=RSA




BASENAME=$(basename "$0" .sh)

[ ! -x "$(which certtool)" ] && echo "${BASENAME} needs certtool (gnutls-bin) anywhere in ${PATH}" 1>&2 && exit 1
[ ! -x "$(which gpg)" ] && echo "${BASENAME} needs gpg (gnupg) anywhere in ${PATH}" 1>&2 && exit 1




while getopts ':a:n:d:i:e:z:y:o:u:l:s:c:t:p:xrf' OPT "$@"; do
  case ${OPT} in
    a) ALGO=${OPTARG} ;;
    n) NAME=${OPTARG} ;;
    d) DNS_NAMES=${OPTARG} ;;
    i) IP_ADDRESSES=${OPTARG} ;;
    e) EMAIL_NAMES=${OPTARG} ;;
    z) TIMEZONE=${OPTARG} ;;
    y) YEAR=${OPTARG} ;;
    o) ORGANIZATION=${OPTARG} ;;
    u) UNIT=${OPTARG} ;;
    l) LOCALITY=${OPTARG} ;;
    s) STATE=${OPTARG} ;;
    c) COUNTRY=${OPTARG} ;;
    t) CRL_DIST_POINTS=${OPTARG} ;;
    p) PASSPHRASE=${OPTARG} ;;
    x) REQUEST=sign ;;
    r) REQUEST=revoke ;;
    f) FORCE=IAMSURE ;;
    *)
      echo "Usage: ${BASENAME} [OPTION] TEMPLATE CERTIFICATE_AUTHORITY [LEAF_CERTIFICATE]"      2>&1
      echo "           -a  Cryptographic algorithm (RSA ECDSA)"                                 2>&1
      echo "           -n  Override Common Name"                                                2>&1
      echo "           -d  Additional domain names (DNS SubjectAltName)"                        2>&1
      echo "           -i  Additional ip addresses (IP SubjectAltName)"                         2>&1
      echo "           -e  Additional email addresses (email SubjectAltName)"                   2>&1
      echo "           -z  Timezone"                                                            2>&1
      echo "           -y  Year (valid up to and entirely including)"                           2>&1
      echo "           -o  Organisation name"                                                   2>&1
      echo "           -u  Organisational unit"                                                 2>&1
      echo "           -l  Locality (City)"                                                     2>&1
      echo "           -s  State (or Province)"                                                 2>&1
      echo "           -c  Country code (ISO)"                                                  2>&1
      echo "           -t  CRL Dist Points"                                                     2>&1
      echo "           -p  Passphrase for GPG/PKCS#12 export"                                   2>&1
      echo "           -x  Sign Certificate Signing Request"                                    2>&1
      echo "           -r  Revoke Certificate"                                                  2>&1
      echo "           -f  Force (don't ask for confirmation)"                                  2>&1
      echo "     TEMPLATE  $(grep '^ *[a-z|]*)$' $0 | tr -d ' )' | tr '|' '\n' | tr '\n' ' ')"  2>&1
      exit 1
      ;;
  esac
done

shift $(( ${OPTIND} - 1 ))

CA_ROOT=$(echo $2 | tr 'A-Z' 'a-z' | tr -cd '0-9a-z-/' | cut -d '/' -f 1)
CERT_ROOT=$(echo $2 | tr 'A-Z' 'a-z' | tr -cd '0-9a-z-/')
CERT_LEAF=$(echo $3 | sed 's#^*#wildcard#g' | sed 's#@#-at-#g' | tr '.' '-' | tr 'A-Z' 'a-z' | tr -cd '0-9a-z-' | sed 's#^[^a-z0-9]*##g' | sed 's#[^a-z0-9]*$##g')

TEMPLATE=$1
CERT_ROOT_NAME=$2
CERT_LEAF_NAME=$3

case ${ALGO} in
  RSA)
    ROOT_KEY_PARAMS='--rsa --bits 4096 --hash sha384'
    LEAF_KEY_PARAMS='--rsa --bits 2048 --hash sha256'
    ;;
  ECDSA)
    ROOT_KEY_PARAMS='--ecdsa --curve secp384r1 --hash sha384'    # estimated sec equiv to RSA7680
    LEAF_KEY_PARAMS='--ecdsa --curve secp256r1 --hash sha256'    # estimated sec equiv to RSA3072
    ;;
  EdDSA)
    ROOT_KEY_PARAMS='--key-type ed25519 --hash sha512'           # untested, requires gnutls 3.6+
    LEAF_KEY_PARAMS='--key-type ed25519 --hash sha512'           # untested, requires gnutls 3.6+
    ;;
  *)
    echo "${BASENAME}: invalid ALGO: ${ALGO}" 1>&2 && exit 1
    ;;
esac




confirm ()
{
  [ "${FORCE}" != "IAMSURE" ] && echo "Are you sure you want to proceed with the $1 operation (Type IAMSURE to continue)?" && read FORCE
  [ "${FORCE}" != "IAMSURE" ] && echo "The user failed to confirm requested $1 operation, aborting..." 1>&2 && exit 1
}




genpass ()
{
  if [ "${PASSPHRASE}" != "" ]; then
    echo "${PASSPHRASE}" | tee $1
  else
    echo $(head -c 48 /dev/urandom | base64 -w 0 | tr -d '/+=oO01iIl5S8B' | tail -c 24) | tee $1
  fi

  [ -f $1 ] && chmod 600 $1
}




md5sums ()
{
  (cd $1; md5sum *[!md5])
}




crtbundle ()
{
  local D=$1

  while [ "${D}" != "" ]; do
    if [ -f ${D}/$(basename ${D}).crt ]; then
      cat ${D}/$(basename ${D}).crt
    else
      echo "${BASENAME}: missing certificate ${D}/$(basename ${D}).crt" 1>&2 && exit 1
    fi
    D=$(echo ${D} | sed "s#/\?$(basename ${D})\$##g")
  done
}




template ()
{
  [ "${COUNTRY}" != "" ] && echo "country = ${COUNTRY}"
  [ "${STATE}" != "" ] && echo "state = '${STATE}'"
  [ "${LOCALITY}" != "" ] && echo "locality = '${LOCALITY}'"
  [ "${ORGANIZATION}" != "" ] && echo "organization = '${ORGANIZATION}'"

  case ${TEMPLATE} in
    root)
      echo "unit = '${UNIT:-${NAME:-${CERT_ROOT_NAME}} Trust Network}'"
      echo "cn = '${NAME:-${CERT_ROOT_NAME} ${ALGO} Root CA $(date +%Y)}'"
      echo "ca"
      echo "cert_signing_key"
      echo "crl_signing_key"
    ;;
    inter)
      echo "unit = '${UNIT:-${NAME:-${CERT_ROOT_NAME}} Trust Network}'"
      echo "cn = '${NAME:-${CERT_ROOT_NAME} ${ALGO} ${CERT_LEAF_NAME} CA $(date +%Y)}'"
      echo "ca"
      echo "cert_signing_key"
      echo "crl_signing_key"
      ;;
    server|client)
      [ "${UNIT}" != "" ] && echo "unit = '${UNIT}'"
      echo "cn = '${NAME:-${CERT_LEAF_NAME}}'"
      echo "dns_name = '${NAME:-${CERT_LEAF_NAME}}'"               # Subject Alternative Name
      for DNS_NAME in ${DNS_NAMES}; do
        echo "dns_name = '${DNS_NAME}'"                            # Subject Alternative Name
      done
      for IP_ADDRESS in ${IP_ADDRESSES}; do
        echo "ip_address = '${IP_ADDRESS}'"                        # Subject Alternative Name
      done
      echo "signing_key"
      echo "encryption_key"
      [ "${TEMPLATE}" = "server" ] && echo "tls_www_server"
      echo "tls_www_client"
      ;;
    email)
      [ "${UNIT}" != "" ] && echo "unit = '${UNIT}'"
      echo "cn = '${NAME:-Basic ID}'"
      echo "pkcs9_email = '${CERT_LEAF_NAME}'"
      echo "email = '${CERT_LEAF_NAME}'"                           # Subject Alternative Name
      for EMAIL_NAME in ${EMAIL_NAMES}; do
        echo "email = '${EMAIL_NAME}'"                             # Subject Alternative Name
      done
      echo "email_protection_key"
      echo "data_encipherment"
      echo "signing_key"
      echo "encryption_key"
      echo "tls_www_client"
      ;;
    codesign)
      [ "${UNIT}" != "" ] && echo "unit = '${UNIT}'"
      echo "cn = '${NAME:-${CERT_LEAF_NAME}}'"
      echo "signing_key"
      echo "code_signing_key"
      echo "key_purpose_oid 1.3.6.1.4.1.311.2.1.22"                # Microsoft Commercial Code Signing
      ;;
    timestamp)
      [ "${UNIT}" != "" ] && echo "unit = '${UNIT}'"
      echo "cn = '${NAME:-${CERT_LEAF_NAME}}'"
      echo "signing_key"
      echo "time_stamping_key"
      ;;
    *)
      echo "${BASENAME}: internal $0 error, $1 template unknown!" 1>&2 && exit 1
      ;;
  esac

  [ "${CRL_DIST_POINTS}" != "" ] && echo "crl_dist_points = '${CRL_DIST_POINTS}'"

  [ "${REQUEST}" = "sign" ] && echo "honor_crq_ext = 2.5.29.17"    # Subject Alternative Name

  case ${TEMPLATE} in
    root)
      echo "expiration_date = '${YEAR:-$(( $(date +%Y) + ${DEFAULT_ROOT_YEARS} ))}-12-31 23:59:59 ${TIMEZONE:-${DEFAULT_TIMEZONE}}'"
      ;;
    inter)
      echo "expiration_date = '${YEAR:-$(( $(date +%Y) + ${DEFAULT_INTER_YEARS} ))}-12-31 23:59:59 ${TIMEZONE:-${DEFAULT_TIMEZONE}}'"
      ;;
    *)
      if [ "${YEAR}" != "" ]; then
        echo "expiration_date = '${YEAR}-12-31 23:59:59 ${TIMEZONE:-${DEFAULT_TIMEZONE}}'"
      else
        echo "expiration_days = 397"
      fi
      ;;
  esac
}




if [ $# -eq 2 ] &&                                                                                \
   [ "${TEMPLATE}" = "root" ] &&                                                                  \
   [ ! -d ${CERT_ROOT} ]; then

  mkdir -p ${CERT_ROOT}
  certtool --generate-privkey                 ${ROOT_KEY_PARAMS}                                  \
           --outfile                          ${CERT_ROOT}/${CERT_ROOT}.key

  template                                  > ${CERT_ROOT}/${CERT_ROOT}.cfg
  certtool --generate-self-signed                                                                 \
           --template                         ${CERT_ROOT}/${CERT_ROOT}.cfg                       \
           --load-privkey                     ${CERT_ROOT}/${CERT_ROOT}.key                       \
           --outfile                          ${CERT_ROOT}/${CERT_ROOT}.crt

  md5sums ${CERT_ROOT}                      > ${CERT_ROOT}/${CERT_ROOT}.md5

  certtool --generate-crl                                                                         \
           --template                         ${CERT_ROOT}/${CERT_ROOT}.cfg                       \
           --load-ca-privkey                  ${CERT_ROOT}/${CERT_ROOT}.key                       \
           --load-ca-certificate              ${CERT_ROOT}/${CERT_ROOT}.crt                       \
           --outfile                          ${CERT_ROOT}/${CERT_ROOT}.crl

fi

if [ $# -eq 3 ] &&                                                                                \
   [ "${REQUEST}" != "sign" ] &&                                                                  \
   [ "${REQUEST}" != "revoke" ] &&                                                                \
   [   -f ${CERT_ROOT}/$(basename ${CERT_ROOT}).key ] &&                                          \
   [   -f ${CERT_ROOT}/$(basename ${CERT_ROOT}).crt ] &&                                          \
   [ ! -d ${CERT_ROOT}/${CERT_LEAF}                 ]; then

  [ "${TEMPLATE}" = "inter" ] && LEAF_KEY_PARAMS=${ROOT_KEY_PARAMS}

  mkdir -p ${CERT_ROOT}/${CERT_LEAF}
  certtool --generate-privkey                 ${LEAF_KEY_PARAMS}                                  \
           --outfile                          ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.key

  template                                  > ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.cfg
  certtool --generate-certificate                                                                 \
           --template                         ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.cfg          \
           --load-privkey                     ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.key          \
           --outfile                          ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt          \
           --load-ca-privkey                  ${CERT_ROOT}/$(basename ${CERT_ROOT}).key           \
           --load-ca-certificate              ${CERT_ROOT}/$(basename ${CERT_ROOT}).crt

  [ "${TEMPLATE}" != "inter" ] &&                                                                 \
  crtbundle ${CERT_ROOT}/${CERT_LEAF}       > ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.crt

  [ "${TEMPLATE}" != "inter" ] &&                                                                 \
  certtool --to-p12 --outder                                                                      \
           --p12-name                         ${CERT_LEAF}                                        \
           --load-privkey                     ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.key          \
           --load-certificate                 ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.crt   \
           --outfile                          ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.pfx   \
           --password               $(genpass ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.pwd)

  [ "${TEMPLATE}" != "inter" ] &&                                                                 \
  tar      --create --owner=0 --group=0                                                           \
           --file - --directory               ${CERT_ROOT}/${CERT_LEAF} ${CERT_LEAF}.key          \
                                                                        ${CERT_LEAF}.crt          \
                                                                        ${CERT_LEAF}.bundle.crt   \
              | gpg --quiet --symmetric --armor                                                   \
                    --compress-algo Uncompressed --digest-algo SHA256 --cipher-algo AES128        \
                    --batch --passphrase-file ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.pwd   \
                                            > ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.asc

  md5sums ${CERT_ROOT}/${CERT_LEAF}         > ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.md5

  [ "${TEMPLATE}" = "inter" ] &&                                                                  \
  certtool --generate-crl                                                                         \
           --template                         ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.cfg          \
           --load-ca-privkey                  ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.key          \
           --load-ca-certificate              ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt          \
           --outfile                          ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crl

fi

if [ $# -eq 3 ] &&                                                                                \
   [ "${REQUEST}" = "sign" ] &&                                                                   \
   [   -f ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.csr ] &&                                         \
   [ ! -f ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt ]; then

  certtool --crq-info --infile                ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.csr
  confirm signing

  template                                  > ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.cfg
  certtool --generate-certificate             ${LEAF_KEY_PARAMS}                                  \
           --template                         ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.cfg          \
           --load-request                     ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.csr          \
           --outfile                          ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt          \
           --load-ca-privkey                  ${CERT_ROOT}/$(basename ${CERT_ROOT}).key           \
           --load-ca-certificate              ${CERT_ROOT}/$(basename ${CERT_ROOT}).crt

  [ "${TEMPLATE}" != "inter" ] &&                                                                 \
  crtbundle ${CERT_ROOT}/${CERT_LEAF}       > ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.crt

  [ "${TEMPLATE}" != "inter" ] &&                                                                 \
  certtool --to-p12 --outder                                                                      \
           --p12-name                         ${CERT_LEAF}                                        \
           --load-certificate                 ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.crt   \
           --outfile                          ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.bundle.pfx   \
           --password                password # Windows compliance

  md5sums ${CERT_ROOT}/${CERT_LEAF}         > ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.md5

fi

if [ $# -eq 3 ] &&                                                                                \
   [ "${REQUEST}" = "revoke" ] &&                                                                 \
   [ "${TEMPLATE}" = "revoke" ] &&                                                                \
   [   -f ${CERT_ROOT}/$(basename ${CERT_ROOT}).key  ] &&                                         \
   [   -f ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt ]; then

  certtool --certificate-info --infile        ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt
  confirm revocation


  [ "${CERT_ROOT}" != "${CA_ROOT}" ] &&                                                           \
  certtool --generate-crl                                                                         \
           --load-crl                         ${CERT_ROOT}/$(basename ${CERT_ROOT}).crl           \
           --template                         ${CERT_ROOT}/$(basename ${CERT_ROOT}).cfg           \
           --load-ca-privkey                  ${CERT_ROOT}/$(basename ${CERT_ROOT}).key           \
           --load-ca-certificate              ${CERT_ROOT}/$(basename ${CERT_ROOT}).crt           \
           --load-certificate                 ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt          \
           --outfile                          ${CERT_ROOT}/$(basename ${CERT_ROOT}).crlx

  if [ $? -eq 0 ]; then
    mv ${CERT_ROOT}/$(basename ${CERT_ROOT}).crlx ${CERT_ROOT}/$(basename ${CERT_ROOT}).crl
  else
    echo "ERROR: Failed to update Intermediate CA CRL" && exit 1
  fi

  certtool --generate-crl                                                                         \
           --load-crl                         ${CA_ROOT}/$(basename ${CA_ROOT}).crl               \
           --template                         ${CA_ROOT}/$(basename ${CA_ROOT}).cfg               \
           --load-ca-privkey                  ${CA_ROOT}/$(basename ${CA_ROOT}).key               \
           --load-ca-certificate              ${CA_ROOT}/$(basename ${CA_ROOT}).crt               \
           --load-certificate                 ${CERT_ROOT}/${CERT_LEAF}/${CERT_LEAF}.crt          \
           --outfile                          ${CA_ROOT}/$(basename ${CA_ROOT}).crlx

  if [ $? -eq 0 ]; then
    mv ${CA_ROOT}/$(basename ${CA_ROOT}).crlx ${CA_ROOT}/$(basename ${CA_ROOT}).crl
    mv ${CERT_ROOT}/${CERT_LEAF} ${CERT_ROOT}/${CERT_LEAF}_REVOKED_$(date +%Y%m%d%H%M%S)
  else
    echo "ERROR: Failed to update Root CA CRL" && exit 1
  fi

fi
